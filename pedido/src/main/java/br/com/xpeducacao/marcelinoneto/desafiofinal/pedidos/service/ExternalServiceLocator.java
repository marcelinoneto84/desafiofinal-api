package br.com.xpeducacao.marcelinoneto.desafiofinal.pedidos.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import br.com.xpeducacao.marcelinoneto.desafiofinal.pedidos.dto.ClienteDto;
import br.com.xpeducacao.marcelinoneto.desafiofinal.pedidos.dto.ProdutoDto;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

/**
 * Service Locator Pattern - Localiza e consome servi√ßos externos
 * Este padr√£o centraliza a l√≥gica de localiza√ß√£o de servi√ßos, 
 * facilitando a manuten√ß√£o e permitindo mudan√ßas de configura√ß√£o
 * sem alterar o c√≥digo cliente.
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class ExternalServiceLocator {
    
    private final RestTemplate restTemplate;
    
    @Value("${app.services.cliente.url:http://localhost:8081}")
    private String clienteServiceUrl;
    
    @Value("${app.services.produto.url:http://localhost:8082}")
    private String produtoServiceUrl;
    
    /**
     * Localiza e consulta o servi√ßo de Cliente
     */
    public ClienteDto findClienteById(Long clienteId) {
        try {
            String url = clienteServiceUrl + "/clientes/" + clienteId;
            log.info("üîç Consultando cliente no servi√ßo: {}", url);
            
            ClienteDto cliente = restTemplate.getForObject(url, ClienteDto.class);
            
            if (cliente != null) {
                log.info("‚úÖ Cliente encontrado: {} (ID: {})", cliente.getNome(), cliente.getId());
            } else {
                log.warn("‚ö†Ô∏è Cliente n√£o encontrado para ID: {}", clienteId);
            }
            
            return cliente;
        } catch (Exception e) {
            log.error("‚ùå Erro ao consultar cliente ID {}: {}", clienteId, e.getMessage());
            return createClienteFallback(clienteId);
        }
    }
    
    /**
     * Localiza e consulta o servi√ßo de Produto
     */
    public ProdutoDto findProdutoById(Long produtoId) {
        try {
            String url = produtoServiceUrl + "/produtos/" + produtoId;
            log.info("üîç Consultando produto no servi√ßo: {}", url);
            
            ProdutoDto produto = restTemplate.getForObject(url, ProdutoDto.class);
            
            if (produto != null) {
                log.info("‚úÖ Produto encontrado: {} (ID: {})", produto.getNome(), produto.getId());
            } else {
                log.warn("‚ö†Ô∏è Produto n√£o encontrado para ID: {}", produtoId);
            }
            
            return produto;
        } catch (Exception e) {
            log.error("‚ùå Erro ao consultar produto ID {}: {}", produtoId, e.getMessage());
            return createProdutoFallback(produtoId);
        }
    }
    
    /**
     * Fallback para quando o servi√ßo de cliente n√£o estiver dispon√≠vel
     */
    private ClienteDto createClienteFallback(Long clienteId) {
        return ClienteDto.builder()
                .id(clienteId)
                .nome("Cliente Indispon√≠vel")
                .email("servico-indisponivel@sistema.com")
                .documento("00000000000")
                .score(0)
                .build();
    }
    
    /**
     * Fallback para quando o servi√ßo de produto n√£o estiver dispon√≠vel
     */
    private ProdutoDto createProdutoFallback(Long produtoId) {
        return ProdutoDto.builder()
                .id(produtoId)
                .nome("Produto Indispon√≠vel")
                .descricao("Servi√ßo de produtos temporariamente indispon√≠vel")
                .preco(java.math.BigDecimal.ZERO)
                .estoque(0)
                .build();
    }
}